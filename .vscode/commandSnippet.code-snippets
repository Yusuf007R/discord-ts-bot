{
	// Place your echidna-tan workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"CommandSnippet": {
		"prefix": "command",
		"body": [
			"import { Command } from '@Structures/command';",
			"import { OptionsBuilder } from '@Utils/options-builder';",
			"import { CacheType, CommandInteraction } from 'discord.js';",
			"",
			"const options = new OptionsBuilder()",
			"  .build();",
			"",
			"export default class ${1:CommandName}Command extends Command<typeof options> {",
			"  constructor() {",
			"    super({",
			"      name: '${2:command-name}',",
			"      description: '${3:Command description}',",
			"      options",
			"    });",
			"  }",
			"",
			"",
			"  async run(interaction: CommandInteraction<CacheType>) {",
			"",
			"  }",
			"}"
		],
		"description": "A generic command structure for Discord.js"
	}
}